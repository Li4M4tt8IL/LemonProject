plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	include(implementation("com.googlecode.json-simple:json-simple:1.1.1"))

	include(implementation("io.rest-assured:rest-assured:4.3.3"))
	include(implementation("io.rest-assured:rest-assured-common:4.3.3"))
	include(implementation("io.rest-assured:json-path:4.3.3"))
	include(implementation("io.rest-assured:xml-path:4.3.3"))

	include(implementation("org.apache.httpcomponents:httpmime:4.3.1"))
	include(implementation("org.codehaus.groovy:groovy:3.0.7"))
	include(implementation("org.codehaus.groovy:groovy-json:3.0.7"))
	include(implementation("org.hamcrest:hamcrest:2.2"))

	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

	compile group: 'io.rest-assured', name: 'rest-assured', version: '4.3.3'
	compile group: 'io.rest-assured', name: 'rest-assured-common', version: '4.3.3'
	compile group: 'io.rest-assured', name: 'json-path', version: '4.3.3'
	compile group: 'io.rest-assured', name: 'xml-path', version: '4.3.3'

	compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.3.1'
	compile group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

	compile group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.7'
	compile group: 'org.codehaus.groovy', name: 'groovy-json', version: '3.0.7'

	include(implementation("com.thoughtworks.xstream:xstream:1.4.15"))
	include(implementation("com.tunnelvisionlabs:antlr4-runtime:4.9.0"))
	include(implementation("org.apache.ivy:ivy:2.5.0"))
	include(implementation("org.codehaus.gpars:gpars:1.2.1"))
	include(implementation("org.fusesource.jansi:jansi:2.2.0"))

	compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.15'
	compile group: 'com.tunnelvisionlabs', name: 'antlr4-runtime', version: '4.9.0'
	compile group: 'org.apache.ivy', name: 'ivy', version: '2.5.0'
	compile group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1'
	compile group: 'org.fusesource.jansi', name: 'jansi', version: '2.2.0'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
